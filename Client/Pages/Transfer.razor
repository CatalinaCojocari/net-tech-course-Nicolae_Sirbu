@page "/transfer/{sourceWalletId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Endava_Project.Shared
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager navManager


@if (wallet == null)
{
    <h2>Loading...</h2>
}
else
{
    
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Wallet Informations :</h5>
            <h6 class="card-subtitle mb-2 text-muted">Amount : @wallet.Amount</h6>
            <h6 class="card-subtitle mb-2 text-muted">Currency : @wallet.Currency</h6>
            <br />
            <h5 class="card-title">Make a transfer to :</h5>
            <div class="row">
                <div class="col-6">
                    <label>Recipient's name :</label>
                    <input type="email" class="form-control" placeholder="Recipient's name..." @bind="data.Username">
                    @if (StatusData(1,data.Username))
                    {
                        <small class="form-text text-success">Recipient's name is valid.</small>
                    }
                    else
                    {
                        <small class="form-text text-danger">Recipient's name is invalid.</small>
                    }
                </div>
                <div class="col-6">
                    <label>Recipient's Wallet Id :</label>
                    <input class="form-control" placeholder="Recipient's Wallet Id..." @bind="targetId">
                    @if (StatusData(2,targetId))
                    {
                        <small class="form-text text-success">The Wallet Id format is valid.</small>
                    }
                    else
                    {
                        <small class="form-text text-danger">The Wallet Id format is invalid.</small>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-6 p-2">
                    <label>Amount :</label>
                    <input type="text" class="form-control" placeholder="The Amount..." @bind="Amount">
                    @if (StatusData(3,Amount))
                    {
                        <small class="form-text text-success">The amount entered is valid.</small>
                    }
                    else
                    {
                        <small class="form-text text-danger">The amount entered is invalid.</small>
                    }
                </div>
                <div class="col-6 p-3">
                    <br />
                    @if (StatusData(1,data.Username) && StatusData(2,targetId) && StatusData(3,Amount))
                    {
                        <button class="btn btn-danger" @onclick=MakeTransfer>Finish the transfer</button>
                        <small class="form-text text-success">The transfer can be done now.</small>
                    }
                    else
                    {
                        <button class="btn btn-danger">Finish the transfer</button>
                        <small class="form-text text-danger">The transfer can't be done now.</small>
                    }
                </div>
            </div>

        </div>
    </div>
    <br />
    @if (!Status)
    {
        <div class="alert alert-danger" role="alert">
            Atentie ! Datele introduse nu corespund aceluiasi utilizator !
        </div>
    }
}
@code {
    [Parameter]
    public string sourceWalletId { get; set; }
    public Wallet wallet { get; set; }

    public List<string> users = new List<string>();
    public bool Status = true;
    public string Amount, targetId;
    public TransferDto data = new TransferDto {
        Username = null
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            wallet = await HttpClient.GetFromJsonAsync<Wallet>($"api/wallet/{sourceWalletId}");
            users = await HttpClient.GetFromJsonAsync<List<string>>($"api/helper");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private bool StatusData(int i,string info)
    {
        decimal number;
        Guid id;
        if (i == 1)
        {
            foreach (var s in users)
                if (info == s )
                    return true;
        }
        if (i == 2 && Guid.TryParse(info,out id) && id.ToString() != sourceWalletId)
            return true;
        if (i == 3 && Decimal.TryParse(info,out number))
            if(number <= wallet.Amount && number>=1)
                return true;
        return false;
    }

    private async Task MakeTransfer()
    {
        try
        {
            data.SourceId = wallet.Id;
            data.TargetId = Guid.Parse(targetId);
            data.Amount = Decimal.Parse(Amount);
            data.Currency = wallet.Currency;

            var response = await HttpClient.PostAsJsonAsync($"api/wallet/transfer", data);
            if (response.IsSuccessStatusCode)
            {
                navManager.NavigateTo("wallets");
            }
            else
                Status = false;

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
