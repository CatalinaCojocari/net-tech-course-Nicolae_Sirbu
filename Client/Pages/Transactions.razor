@page "/transactions"
@using System
@using System.Reflection
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Endava_Project.Shared
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager navManager

<h2>Transactions history </h2>

@if(transactionsList == null)
{
    <h3>Nu aveti nici o transactie la moment...</h3>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <h4>Show : </h4>

                    <select @bind="@methodName">
                        <option value="LoadAllTransactions">All transactions</option>
                        <option value="LoadMadeTransactions">Outbound transactions</option>
                        <option value="LoadRecivedTransactions">Recived transactions</option>
                        <option value="LoadInternTransactions">Intern transactions</option>
                    </select>
                </div>
                <div class="col">
                    <h4>Sort by : </h4>

                    <select>
                        <option value="">Amount & Currency</option>
                        <option value="">Transaction Date</option>
                        <option value="">Destination</option>
                    </select>
                </div>

                <div class="col">
                    <h4>Sort order : </h4>

                    <select>
                        <option value="">Ascendent</option>
                        <option value="">Descendent</option>
                    </select>
                </div>

            </div>
            <hr />
            <br />
            @if (transactionsList.Count > 0)
            {
                <table style="width:100%">
                    <tr>
                        <th>Source Wallet Id</th>
                        <th>Destination Wallet Id</th>
                        <th>Amount</th>
                        <th>Currency</th>
                        <th>Transaction Date</th>
                    </tr>
                    @foreach (var t in transactionsList)
                    {
                        <tr>
                            <td>@t.SourceWalletId</td>
                            <td>@t.DestinationWalletId</td>
                            <td>@t.Amount</td>
                            <td>@t.Currency</td>
                            <td>@t.Date</td>
                        </tr>
                    }
                </table>
            }
            else
            {
                <div class="alert alert-dark" role="alert">You don't have any transactions of this kind .</div>
            }
        </div>
    </div>
}


@code {
    private List<Transaction> transactionsList = new List<Transaction>();
    private string str;
    private string methodName { get { return str; } set { str = value; CallMethod(methodName).GetAwaiter(); } }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAllTransactions();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async Task LoadAllTransactions()
    {

        transactionsList = await HttpClient.GetFromJsonAsync<List<Transaction>>($"api/transaction/transactions");
    }

    public async Task LoadMadeTransactions()
    {
        transactionsList = await HttpClient.GetFromJsonAsync<List<Transaction>>($"api/transaction/madetransactions");
    }

    public async Task LoadRecivedTransactions()
    {
        transactionsList = await HttpClient.GetFromJsonAsync<List<Transaction>>($"api/transaction/recivedtransactions");
    }

    public async Task LoadInternTransactions()
    {
        transactionsList = await HttpClient.GetFromJsonAsync<List<Transaction>>($"api/transaction/interntransactions");
    }

    public async Task CallMethod(string data)
    {
        //Type thisType = this.GetType();
        //MethodInfo theMethod = thisType.GetMethod(data);
        //theMethod.Invoke(this, null);

        if (data == "LoadMadeTransactions")
            await LoadMadeTransactions();
        if (data == "LoadRecivedTransactions")
            await LoadRecivedTransactions();
        if (data == "LoadInternTransactions")
            await LoadInternTransactions();
        if (data == "LoadAllTransactions")
            await LoadAllTransactions();
        StateHasChanged();

    }
}
