@page "/transactions"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Endava_Project.Shared
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager navManager

<h2>Transactions history </h2>

@if(transactionsData.TransactionsList == null)
{
    <h3>Nu aveti nici o transactie la moment...</h3>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <h4>Show : </h4>

                    <select @bind="@typeFilter">
                        <option value="All">All transactions</option>
                        <option value="Made">Outbound transactions</option>
                        <option value="Recived">Recived transactions</option>
                        <option value="Intern">Intern transactions</option>
                    </select>
                </div>
                <div class="col">
                    <h4>Sort by : </h4>

                    <select @bind="@sortFilter">
                        <option value="Date">Date</option>
                        <option value="Currency">Currency</option>
                        @if (typeFilter == "Made")
                        {
                            <option value="Target">Destination</option>
                        }
                        @if (typeFilter == "Recived")
                        {
                            <option value="Target">Source</option>
                        }
                    </select>
                </div>

                <div class="col">
                    <h4>Sort order : </h4>

                    <select @bind="@orderFilter">
                        <option value="Descendent">Descendent</option>
                        <option value="Ascendent">Ascendent</option>
                    </select>
                </div>

            </div>
            <hr />
            <br />
            @if (transactionsData.TransactionsCount > 0)
            {
                <table style="width:100%">
                    <tr>
                        @switch (typeFilter)
                        {
                            case "Made":
                                {
                                    <th>Destination</th>
 }
                                break;
                            case "Recived":
                                {
                                    <th>Source</th>
}
                                break;
                            case "Intern":
                                break;
                            default:
                                {
                                    <th>Source</th>
                                    <th>Destination</th>
}
                                break;
                        }
                        <th>Amount</th>
                        <th>Currency</th>
                        <th>Transaction Date</th>
                    </tr>
                    @foreach (var t in transactionsData.TransactionsList)
                    {
                        <tr>
                            @switch (typeFilter)
                            {
                                case "Made":
                                    {
                                        <td>@t.DestinationUserName</td>
}
                                    break;
                                case "Recived":
                                    {
                                        <td>@t.SourceUserName</td>
}
                                    break;
                                case "Intern":
                                    break;
                                default:
                                    {
                                        <td>@t.SourceUserName</td>
                                        <td>@t.DestinationUserName</td>
}
                                    break;
                            }
                            <td>@t.Amount</td>
                            <td>@t.Currency</td>
                            <td>@t.Date</td>
                        </tr>
                    }
                </table>
                <hr />
                @if (CalculatePageCount() > 1)
                {
                    <div class="pagination">
                        <a @onclick="() => LoadTransactions(Math.Clamp(pageNumber - 1, 1, CalculatePageCount()))">&laquo;</a>
                        @for (int i = Math.Clamp(pageNumber - 2, 1, CalculatePageCount()); i <= Math.Clamp(pageNumber + 2, 1, CalculatePageCount()); i++)
                        {
                            var pn = i;
                            <a class="@(pn == pageNumber ? "active" : "")" @onclick="() => LoadTransactions(pn)">@pn</a>
                        }
                        <a @onclick="() => LoadTransactions(Math.Clamp(pageNumber + 1, 1, CalculatePageCount()))">&raquo;</a>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-dark" role="alert">You don't have any transactions of this kind .</div>
            }
        </div>
    </div>
}


@code {
    private TransactionHistoryData transactionsData = new TransactionHistoryData {
        TransactionsList = new List<TransactionDto>()
    };
    private string initialTypeFilter = "All";
    private string typeFilter { get { return initialTypeFilter; } set { initialTypeFilter = value; LoadTransactions(pageNumber).GetAwaiter(); } }
    private string initialSortFilter = "Date";
    private string sortFilter { get { return initialSortFilter; } set { initialSortFilter = value; LoadTransactions(pageNumber).GetAwaiter(); } }
    private string initialOrderFilter = "Descendent";
    private string orderFilter { get { return initialOrderFilter; } set { initialOrderFilter = value; LoadTransactions(pageNumber).GetAwaiter(); } }


    private int pageNumber = 1;
    private int itemsPerPage = 10;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadTransactions(pageNumber);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async Task LoadTransactions(int pNam)
    {
        transactionsData = await HttpClient.GetFromJsonAsync<TransactionHistoryData>($"api/transaction/{typeFilter}/{sortFilter}/{orderFilter}/{itemsPerPage}/{pNam}");
        pageNumber = pNam;
        StateHasChanged();
    }

    private int CalculatePageCount()
    {
        var div = transactionsData.TransactionsCount / itemsPerPage;
        var mod = transactionsData.TransactionsCount % itemsPerPage;
        return div + (mod > 0 ? 1 : 0);
    }

}
